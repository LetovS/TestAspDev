// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Store;

#nullable disable

namespace Store.Migrations
{
    [DbContext(typeof(ResourcesContext))]
    partial class ResourcesContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Store.Entities.AnswerRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Answer")
                        .IsUnique()
                        .HasDatabaseName("UQ_Answers_Answer");

                    b.HasIndex("Id")
                        .HasDatabaseName("IX_Answers_Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers", (string)null);
                });

            modelBuilder.Entity("Store.Entities.InterviewRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("InterviewDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 2, 28, 17, 14, 16, 920, DateTimeKind.Utc).AddTicks(9680));

                    b.Property<Guid>("SurveyId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .HasDatabaseName("IX_Interviews_Id");

                    b.HasIndex("InterviewDate")
                        .HasDatabaseName("IX_Interviews_InterviewDate");

                    b.HasIndex("SurveyId");

                    b.ToTable("Interviews", (string)null);
                });

            modelBuilder.Entity("Store.Entities.QuestionRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SurveyId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .HasDatabaseName("IX_Questions_Id");

                    b.HasIndex("Question")
                        .IsUnique()
                        .HasDatabaseName("UQ_Questions_Question");

                    b.HasIndex("SurveyId");

                    b.ToTable("Questions", (string)null);
                });

            modelBuilder.Entity("Store.Entities.ResultRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("InterviewId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Answer")
                        .IsUnique()
                        .HasDatabaseName("UQ_Results_Answer");

                    b.HasIndex("Id")
                        .HasDatabaseName("IX_Results_Id");

                    b.HasIndex("InterviewId");

                    b.ToTable("Results", (string)null);
                });

            modelBuilder.Entity("Store.Entities.SurveyRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 2, 28, 17, 14, 16, 921, DateTimeKind.Utc).AddTicks(9036));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("EndDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 3, 13, 17, 14, 16, 921, DateTimeKind.Utc).AddTicks(9349));

                    b.Property<DateTime>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 2, 28, 17, 14, 16, 921, DateTimeKind.Utc).AddTicks(9235));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Surveys_CreatedAt");

                    b.HasIndex("Id")
                        .HasDatabaseName("IX_Surveys_Id");

                    b.HasIndex("Title")
                        .IsUnique()
                        .HasDatabaseName("UQ_Surveys_Title");

                    b.ToTable("Surveys", (string)null);
                });

            modelBuilder.Entity("Store.Entities.AnswerRecord", b =>
                {
                    b.HasOne("Store.Entities.QuestionRecord", null)
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Store.Entities.InterviewRecord", b =>
                {
                    b.HasOne("Store.Entities.SurveyRecord", null)
                        .WithMany("Interviews")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Store.Entities.QuestionRecord", b =>
                {
                    b.HasOne("Store.Entities.SurveyRecord", null)
                        .WithMany("Questions")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Store.Entities.ResultRecord", b =>
                {
                    b.HasOne("Store.Entities.InterviewRecord", null)
                        .WithMany("Results")
                        .HasForeignKey("InterviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Store.Entities.InterviewRecord", b =>
                {
                    b.Navigation("Results");
                });

            modelBuilder.Entity("Store.Entities.QuestionRecord", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Store.Entities.SurveyRecord", b =>
                {
                    b.Navigation("Interviews");

                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
